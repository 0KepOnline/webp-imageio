name: build

on: [pull_request, push]

env:
  JAVA_VERSION: '8'

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        platform: [x64, Win32]
        include:
          - platform: x64
            bits: 64
          - platform: Win32
            bits: 32

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: setup CMake
        run: choco install cmake --yes --no-progress

      - name: setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: create build directory
        run: mkdir build

      - name: configure CMake
        run: |
          cd build
          cmake -DCMAKE_GENERATOR_PLATFORM=${{ matrix.platform }} ..

      - name: build native library
        run: |
          cd build
          cmake --build . --config Release

      - name: create native resources directory
        run: |
          mkdir src\main\resources\native\win\${{ matrix.bits }}
        shell: cmd

      - name: copy native library build
        run: |
          copy build\src\main\c\Release\*.dll src\main\resources\native\win\${{ matrix.bits }}\
        shell: cmd

      - name: upload native library build
        uses: actions/upload-artifact@v4
        with:
          name: native-win${{ matrix.bits }}
          path: src/main/resources/native/win/${{ matrix.bits }}/
          retention-days: 30

  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      - name: create build directory
        run: mkdir build

      - name: configure CMake
        run: |
          cd build
          cmake ..

      - name: build native library
        run: |
          cd build
          cmake --build . --config Release

      - name: create native resources directory
        run: mkdir -p src/main/resources/native/linux/64

      - name: copy native library build
        run: cp build/src/main/c/*.so src/main/resources/native/linux/64/ || true

      - name: upload native library build
        uses: actions/upload-artifact@v4
        with:
          name: native-lin64
          path: src/main/resources/native/linux/64/
          retention-days: 30

  build-macos:
    runs-on: macos-latest

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'

      - name: setup CMake
        run: brew install cmake

      - name: create build directory
        run: mkdir build

      - name: configure CMake
        run: |
          cd build
          cmake ..

      - name: build native library
        run: |
          cd build
          cmake --build . --config Release

      - name: create native resources directory
        run: mkdir -p src/main/resources/native/mac/64

      - name: copy native library build
        run: cp build/src/main/c/*.dylib src/main/resources/native/mac/64/ || true

      - name: upload native library build
        uses: actions/upload-artifact@v4
        with:
          name: native-mac64
          path: src/main/resources/native/mac/64/
          retention-days: 30

  build-java:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: setup JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'zulu'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: download native library builds
        uses: actions/download-artifact@v4
        with:
          pattern: native-*
          path: downloaded-artifacts

      - name: organize native library builds
        run: |
          mkdir -p src/main/resources/native/win/32
          mkdir    src/main/resources/native/win/64
          mkdir -p src/main/resources/native/linux/64
          mkdir -p src/main/resources/native/mac/64
          
          cp -r downloaded-artifacts/native-win32/* src/main/resources/native/win/32/   || true
          cp -r downloaded-artifacts/native-win64/* src/main/resources/native/win/64/   || true
          
          cp -r downloaded-artifacts/native-lin64/* src/main/resources/native/linux/64/ || true
          
          cp -r downloaded-artifacts/native-mac64/* src/main/resources/native/mac/64/   || true
          
          find src/main/resources/native -type f

      - name: cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: build and test library
        run: mvn clean test

      - name: package library
        run: mvn clean package -DskipTests

      - name: setup GPG
        if: startsWith(github.ref, 'refs/tags/')
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: configure Git
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"

      - name: configure Maven settings
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>${{ secrets.SONATYPE_USERNAME }}</username>
                <password>${{ secrets.SONATYPE_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: publish to Maven Central
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mvn clean deploy -Prelease \
            -Dgpg.passphrase=${{ secrets.MAVEN_GPG_PASSPHRASE }} \
            -Dgpg.pinentry-mode=loopback \
            -Dgpg.batch=true \
            -DstagingDescription="Release ${{ github.ref_name }}"
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

      - name: upload library artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-library
          path: |
            target/*.jar
            target/*-sources.jar
            target/*-javadoc.jar
          retention-days: 30
